* Us a more compact style

It looks like you either have a very strong policy on style and
layout, or used an auto-formatter, because in some places, `SELECT *`
is written in two lines.  That is good, because the query is at least
well formatted and readable.  If you want it to be more compact,
though, you might want to skimp a bit on the newlines.

When formatting code more compactly, there is still "breathing space",
but the scroll-factor is tuned down a bit, so you have a bit higher
view of the code.  I find that it can help.

I like to use a combination of indentation to recognize the query
parts (my indentation is by no means the default in SQL) and a thing I
call "one concept per line", where each line tells me something that
can stand on its own for logic.

Not indenting `UNION`s helps to see the "equal level" of both sides of
the `UNION`, and prevents the lines from getting too long.

#+BEGIN_SRC sql
  DECLARE @MaxLen int = 50;     -- Maximum length of a target column

    WITH SpacePositions AS
       ( SELECT O.OrganisationID
              , CHARINDEX(' ', O.OrganisationName, 0) AS Position
           FROM dbo.Organisations O
          UNION ALL
         SELECT O.OrganisationID
              , CHARINDEX(' ', O.OrganisationName, S.Position + 1) AS Position
           FROM dbo.Organisations O
          INNER JOIN SpacePositions S
                  ON CHARINDEX(' ', O.OrganisationName, S.Position + 1) > S.Position
                 AND S.OrganisationID = O.OrganisationID
       )
       , SplitPositions AS
       ( SELECT S.OrganisationID
              , S.Position - 1 AS Position
           FROM SpacePositions S
          WHERE S.Position != 0
          UNION
         SELECT O.OrganisationID
              , LEN(O.OrganisationName) AS Position
           FROM dbo.Organisations O
       )
       , FirstChunk AS
       ( SELECT D.OrganisationID
              , 1 AS ChunkStart
              , MAX(D.Position) AS ChunkEnd
           FROM ( SELECT S.OrganisationID
                       , S.Position + 1 AS Position
                    FROM SplitPositions S
                   WHERE Position BETWEEN 1 AND @MaxLen
                   UNION
                  SELECT S.OrganisationID
                       , @MaxLen
                    FROM SplitPositions S
                   WHERE NOT EXISTS ( SELECT *
                                        FROM SplitPositions SI
                                       WHERE SI.Position BETWEEN 1 AND @MaxLen
                                         AND SI.OrganisationID = S.OrganisationID
                                    )
                ) D
            GROUP BY D.OrganisationID
       )
       , SecondChunk AS
       ( SELECT C.OrganisationID
              , C.ChunkEnd + 1 AS ChunkStart
              , MAX(D.Position) AS ChunkEnd
           FROM FirstChunk C
          INNER JOIN ( SELECT S.OrganisationID
                            , S.Position + 1 AS Position
                         FROM SplitPositions S
                        INNER JOIN FirstChunk C ON C.OrganisationID = S.OrganisationID
                        WHERE S.Position BETWEEN C.ChunkEnd + 1 AND C.ChunkEnd + @MaxLen
                        UNION
                       SELECT S.OrganisationID
                            , C.ChunkEnd + @MaxLen AS Position
                         FROM SplitPositions S
                        INNER JOIN FirstChunk C ON C.OrganisationID = S.OrganisationID
                        WHERE NOT EXISTS ( SELECT *
                                             FROM SplitPositions SI
                                            WHERE SI.Position BETWEEN C.ChunkEnd + 1 AND C.ChunkEnd + @MaxLen
                                              AND OrganisationID = C.OrganisationID
                                         )
                     ) D ON D.OrganisationID = C.OrganisationID
          GROUP BY C.OrganisationID, C.ChunkEnd
       )
       , ThirdChunk AS
       ( SELECT C.OrganisationID
              , C.ChunkEnd + 1 AS ChunkStart
              , MAX(D.Position) AS ChunkEnd
           FROM SecondChunk C
          INNER JOIN ( SELECT S.OrganisationID
                            , S.Position + 1 AS Position
                         FROM SplitPositions S
                        INNER JOIN SecondChunk C ON C.OrganisationID = S.OrganisationID
                        WHERE S.Position BETWEEN C.ChunkEnd + 1 AND C.ChunkEnd + @MaxLen
                        UNION
                       SELECT S.OrganisationID
                            , C.ChunkEnd + @MaxLen AS Position
                         FROM SplitPositions S
                        INNER JOIN SecondChunk C ON C.OrganisationID = S.OrganisationID
                        WHERE NOT EXISTS ( SELECT *
                                             FROM SplitPositions SI
                                            WHERE SI.Position BETWEEN C.ChunkEnd + 1 AND C.ChunkEnd + @MaxLen
                                              AND OrganisationID = C.OrganisationID
                                         )
                     ) D ON D.OrganisationID = C.OrganisationID
          GROUP BY C.OrganisationID, C.ChunkEnd
       )
  INSERT INTO dbo.OrgStaging
       ( OrganisationID
       , Name1
       , Name2
       , Name3 )
  SELECT O.OrganisationID
       , LTRIM(RTRIM(SUBSTRING(O.OrganisationName, C1.ChunkStart, C1.ChunkEnd)))
       , LTRIM(RTRIM(SUBSTRING(O.OrganisationName, C2.ChunkStart, 1 + C2.ChunkEnd - C2.ChunkStart)))
       , LTRIM(RTRIM(SUBSTRING(O.OrganisationName, C3.ChunkStart, 1 + C3.ChunkEnd - C3.ChunkStart)))
    FROM dbo.Organisations O
   INNER JOIN FirstChunk C1 ON C1.OrganisationID = O.OrganisationID
   INNER JOIN SecondChunk C2 ON C2.OrganisationID = O.OrganisationID
   INNER JOIN ThirdChunk C3 ON C3.OrganisationID = O.OrganisationID
   ORDER BY O.OrganisationID;
#+END_SRC

There is still some compactness to be gained if you write `JOIN`s with
just one `ON` clause on a single line, but only when that `JOIN` is
trivial (for instance on matching primary keys).  Especially in the
final part, I find the symmetry of the `JOIN`s to be clear.
